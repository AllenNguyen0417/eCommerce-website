{"ast":null,"code":"// import { useRef, useState, useEffect } from \"react\";\n\n// const Register = () => {\n//   const userRef = userRef();\n//   const errRef = useRef();\n\n//   const [user, setUser] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [errMsg, setErrMsg] = useState(\"\");\n//   const [success, setSuccess] = useState(\"false\");\n\n//   useEffect(() => {\n//     userRef.current.focus();\n//   }, []);\n\n//   useEffect(() => {\n//     setErrMsg(\"\");\n//   }, []);\n\n//   return (\n//     <section>\n//       <p\n//         ref={errRef}\n//         className={errMsg ? \"errmsg\" : \"offscreen\"}\n//         aria-live=\"assertive\"\n//       >\n//         {errMsg}\n//       </p>\n//       <h1>Register</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label htmlFor=\"username\">\n//           Username:\n//           <FontAwesomeIcon\n//             icon={faCheck}\n//             className={validName ? \"valid\" : \"hide\"}\n//           />\n//           <FontAwesomeIcon\n//             icon={faTimes}\n//             className={validName || !user ? \"hide\" : \"invalid\"}\n//           />\n//         </label>\n//         <input\n//           type=\"text\"\n//           id=\"username\"\n//           ref={userRef}\n//           autoComplete=\"off\"\n//           onChange={(e) => setUser(e.target.value)}\n//           value={user}\n//           required\n//           aria-invalid={validName ? \"false\" : \"true\"}\n//           aria-describedby=\"uidnote\"\n//           onFocus={() => setUserFocus(true)}\n//           onBlur={() => setUserFocus(false)}\n//         />\n//         <p\n//           id=\"uidnote\"\n//           className={\n//             userFocus && user && !validName ? \"instructions\" : \"offscreen\"\n//           }\n//         >\n//           <FontAwesomeIcon icon={faInfoCircle} />\n//           4 to 24 characters.\n//           <br />\n//           Must begin with a letter.\n//           <br />\n//           Letters, numbers, underscores, hyphens allowed.\n//         </p>\n//         <label htmlFor=\"password\">\n//           Password:\n//           <FontAwesomeIcon\n//             icon={faCheck}\n//             className={validPwd ? \"valid\" : \"hide\"}\n//           />\n//           <FontAwesomeIcon\n//             icon={faTimes}\n//             className={validPwd || !pwd ? \"hide\" : \"invalid\"}\n//           />\n//         </label>\n//         <input\n//           type=\"password\"\n//           id=\"password\"\n//           onChange={(e) => setPwd(e.target.value)}\n//           value={pwd}\n//           required\n//           aria-invalid={validPwd ? \"false\" : \"true\"}\n//           aria-describedby=\"pwdnote\"\n//           onFocus={() => setPwdFocus(true)}\n//           onBlur={() => setPwdFocus(false)}\n//         />\n//         <p\n//           id=\"pwdnote\"\n//           className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}\n//         >\n//           <FontAwesomeIcon icon={faInfoCircle} />\n//           8 to 24 characters.\n//           <br />\n//           Must include uppercase and lowercase letters, a number and a special\n//           character.\n//           <br />\n//           Allowed special characters:{\" \"}\n//           <span aria-label=\"exclamation mark\">!</span>{\" \"}\n//           <span aria-label=\"at symbol\">@</span>{\" \"}\n//           <span aria-label=\"hashtag\">#</span>{\" \"}\n//           <span aria-label=\"dollar sign\">$</span>{\" \"}\n//           <span aria-label=\"percent\">%</span>\n//         </p>\n//         <label htmlFor=\"confirm_pwd\">\n//           Confirm Password:\n//           <FontAwesomeIcon\n//             icon={faCheck}\n//             className={validMatch && matchPwd ? \"valid\" : \"hide\"}\n//           />\n//           <FontAwesomeIcon\n//             icon={faTimes}\n//             className={validMatch || !matchPwd ? \"hide\" : \"invalid\"}\n//           />\n//         </label>\n//         <input\n//           type=\"password\"\n//           id=\"confirm_pwd\"\n//           onChange={(e) => setMatchPwd(e.target.value)}\n//           value={matchPwd}\n//           required\n//           aria-invalid={validMatch ? \"false\" : \"true\"}\n//           aria-describedby=\"confirmnote\"\n//           onFocus={() => setMatchFocus(true)}\n//           onBlur={() => setMatchFocus(false)}\n//         />\n//         <p\n//           id=\"confirmnote\"\n//           className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}\n//         >\n//           <FontAwesomeIcon icon={faInfoCircle} />\n//           Must match the first password input field.\n//         </p>\n//         <button\n//           disabled={!validName || !validPwd || !validMatch ? true : false}\n//         >\n//           Sign Up\n//         </button>\n//       </form>\n//       <p>\n//         Already registered?\n//         <br />\n//         <span className=\"line\">\n//           {/*put router link here*/}\n//           {/* <a href=\"#\">Sign In</a> */}\n//         </span>\n//       </p>\n//     </section>\n//   );\n// };\n\n// export default Register;","map":{"version":3,"names":[],"sources":["C:/Users/thanh/OneDrive/Desktop/ecommerce/ecommerce/client/src/components/Register.js"],"sourcesContent":["// import { useRef, useState, useEffect } from \"react\";\r\n\r\n// const Register = () => {\r\n//   const userRef = userRef();\r\n//   const errRef = useRef();\r\n\r\n//   const [user, setUser] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [errMsg, setErrMsg] = useState(\"\");\r\n//   const [success, setSuccess] = useState(\"false\");\r\n\r\n//   useEffect(() => {\r\n//     userRef.current.focus();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     setErrMsg(\"\");\r\n//   }, []);\r\n\r\n//   return (\r\n//     <section>\r\n//       <p\r\n//         ref={errRef}\r\n//         className={errMsg ? \"errmsg\" : \"offscreen\"}\r\n//         aria-live=\"assertive\"\r\n//       >\r\n//         {errMsg}\r\n//       </p>\r\n//       <h1>Register</h1>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label htmlFor=\"username\">\r\n//           Username:\r\n//           <FontAwesomeIcon\r\n//             icon={faCheck}\r\n//             className={validName ? \"valid\" : \"hide\"}\r\n//           />\r\n//           <FontAwesomeIcon\r\n//             icon={faTimes}\r\n//             className={validName || !user ? \"hide\" : \"invalid\"}\r\n//           />\r\n//         </label>\r\n//         <input\r\n//           type=\"text\"\r\n//           id=\"username\"\r\n//           ref={userRef}\r\n//           autoComplete=\"off\"\r\n//           onChange={(e) => setUser(e.target.value)}\r\n//           value={user}\r\n//           required\r\n//           aria-invalid={validName ? \"false\" : \"true\"}\r\n//           aria-describedby=\"uidnote\"\r\n//           onFocus={() => setUserFocus(true)}\r\n//           onBlur={() => setUserFocus(false)}\r\n//         />\r\n//         <p\r\n//           id=\"uidnote\"\r\n//           className={\r\n//             userFocus && user && !validName ? \"instructions\" : \"offscreen\"\r\n//           }\r\n//         >\r\n//           <FontAwesomeIcon icon={faInfoCircle} />\r\n//           4 to 24 characters.\r\n//           <br />\r\n//           Must begin with a letter.\r\n//           <br />\r\n//           Letters, numbers, underscores, hyphens allowed.\r\n//         </p>\r\n//         <label htmlFor=\"password\">\r\n//           Password:\r\n//           <FontAwesomeIcon\r\n//             icon={faCheck}\r\n//             className={validPwd ? \"valid\" : \"hide\"}\r\n//           />\r\n//           <FontAwesomeIcon\r\n//             icon={faTimes}\r\n//             className={validPwd || !pwd ? \"hide\" : \"invalid\"}\r\n//           />\r\n//         </label>\r\n//         <input\r\n//           type=\"password\"\r\n//           id=\"password\"\r\n//           onChange={(e) => setPwd(e.target.value)}\r\n//           value={pwd}\r\n//           required\r\n//           aria-invalid={validPwd ? \"false\" : \"true\"}\r\n//           aria-describedby=\"pwdnote\"\r\n//           onFocus={() => setPwdFocus(true)}\r\n//           onBlur={() => setPwdFocus(false)}\r\n//         />\r\n//         <p\r\n//           id=\"pwdnote\"\r\n//           className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}\r\n//         >\r\n//           <FontAwesomeIcon icon={faInfoCircle} />\r\n//           8 to 24 characters.\r\n//           <br />\r\n//           Must include uppercase and lowercase letters, a number and a special\r\n//           character.\r\n//           <br />\r\n//           Allowed special characters:{\" \"}\r\n//           <span aria-label=\"exclamation mark\">!</span>{\" \"}\r\n//           <span aria-label=\"at symbol\">@</span>{\" \"}\r\n//           <span aria-label=\"hashtag\">#</span>{\" \"}\r\n//           <span aria-label=\"dollar sign\">$</span>{\" \"}\r\n//           <span aria-label=\"percent\">%</span>\r\n//         </p>\r\n//         <label htmlFor=\"confirm_pwd\">\r\n//           Confirm Password:\r\n//           <FontAwesomeIcon\r\n//             icon={faCheck}\r\n//             className={validMatch && matchPwd ? \"valid\" : \"hide\"}\r\n//           />\r\n//           <FontAwesomeIcon\r\n//             icon={faTimes}\r\n//             className={validMatch || !matchPwd ? \"hide\" : \"invalid\"}\r\n//           />\r\n//         </label>\r\n//         <input\r\n//           type=\"password\"\r\n//           id=\"confirm_pwd\"\r\n//           onChange={(e) => setMatchPwd(e.target.value)}\r\n//           value={matchPwd}\r\n//           required\r\n//           aria-invalid={validMatch ? \"false\" : \"true\"}\r\n//           aria-describedby=\"confirmnote\"\r\n//           onFocus={() => setMatchFocus(true)}\r\n//           onBlur={() => setMatchFocus(false)}\r\n//         />\r\n//         <p\r\n//           id=\"confirmnote\"\r\n//           className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}\r\n//         >\r\n//           <FontAwesomeIcon icon={faInfoCircle} />\r\n//           Must match the first password input field.\r\n//         </p>\r\n//         <button\r\n//           disabled={!validName || !validPwd || !validMatch ? true : false}\r\n//         >\r\n//           Sign Up\r\n//         </button>\r\n//       </form>\r\n//       <p>\r\n//         Already registered?\r\n//         <br />\r\n//         <span className=\"line\">\r\n//           {/*put router link here*/}\r\n//           {/* <a href=\"#\">Sign In</a> */}\r\n//         </span>\r\n//       </p>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default Register;\r\n"],"mappings},"metadata":{},"sourceType":"module"}